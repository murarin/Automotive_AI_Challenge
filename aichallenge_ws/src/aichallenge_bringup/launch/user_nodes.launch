<?xml version="1.0"?>
<launch>
    <arg name="acc" default="false"/>
    <arg name="avoid" default="false"/>
    <arg name="traffic_light" default="false"/>


    <rosparam command="load" file="$(find aichallenge_bringup)/data/localizer.yaml"/>
    <!-- <node pkg="tf2_ros"  type="static_transform_publisher" name="world_to_map" args="0 0 2 0 0 0 world map"/> -->
    <node pkg="tf2_ros"  type="static_transform_publisher" name="world_to_map" args="0 0 0 0 0 0 world map"/>
    <node pkg="tf2_ros"  type="static_transform_publisher" name="baselink_to_velodyne" args="1.2 0 2 0 0 0 base_link velodyne"/>

    <node name="image_republish" pkg="image_transport" type="republish" args="compressed in:=/front_camera/image raw out:=/front_camera/image/raw" />


    <!-- voxel grid filter -->
    <node pkg="rostopic" type="rostopic" name="arbitrary_name2" args="pub /config/voxel_grid_filter autoware_config_msgs/ConfigVoxelGridFilter '2.5' '200.0'"/>

    <include file="$(find points_downsampler)/launch/points_downsample.launch">
        <arg name="points_topic" default="/top_velodyne/points_raw"/>
    </include>


    <!-- vel pose connect -->
    <include file="$(find autoware_connector)/launch/vel_pose_connect.launch">
        <arg name="topic_pose_stamped" default="/ndt_pose"/>
        <arg name="topic_twist_stamped" default="/estimate_twist"/>
    </include>


    <!-- ndt matching -->
    <node pkg="rostopic" type="rostopic" name="arbitrary_name" args="pub /config/ndt autoware_config_msgs/ConfigNDT
        '{ header: auto,
        init_pos_gnss: 0,
        x: 0.0,
        y: 0.0,
        z: 0.0,
        roll: 0.0,
        pitch: 0.0,
        yaw: 0.0,
        use_predict_pose: 1,
        error_threshold: 1.0,
        resolution: 1.0,
        step_size: 0.10000000149,
        trans_epsilon: 0.00999999977648,
        max_iterations: 30 }' " output="screen">
    </node>

    <include file="$(find lidar_localizer)/launch/ndt_matching.launch">
        <arg name="method_type" default="0"/>
        <arg name="use_odom" default="false"/>
        <arg name="imu_upside_down" default="false"/>
        <arg name="imu_topic" default="/imu_raw"/>
        <arg name="get_height" default="true"/>
    </include>


    <!-- rviz -->
    <node pkg="rviz" type="rviz" name="rviz" args="-d $(find aichallenge_bringup)/data/aichallenge.rviz" />


    <!-- ray ground filter -->
    <include file="$(find points_preprocessor)/launch/ray_ground_filter.launch">
        <arg name="input_point_topic" default="/top_velodyne/points_raw" />  <!-- input_point_topic, ground filtering will be performed over the pointcloud in this topic. -->
        <arg name="base_frame" default="base_link" />  <!-- Coordinate system to perform transform (default base_link) -->
        <arg name="clipping_height" default="4.0" />  <!-- Remove Points above this height value (default 2.0 meters) -->
        <arg name="min_point_distance" default="3.5" />  <!-- Removes Points closer than this distance from the sensor origin (default 1.85 meters) -->
        <arg name="radial_divider_angle" default="5.0" />  <!-- Angle of each Radial division on the XY Plane (default 0.08 degrees)-->
        <arg name="concentric_divider_distance" default="0.0" />  <!-- Distance of each concentric division on the XY Plane (default 0.0 meters) -->
        <arg name="local_max_slope" default="8" />  <!-- Max Slope of the ground between Points (default 8 degrees) -->
        <arg name="general_max_slope" default="5" />  <!-- Max Slope of the ground in the entire PointCloud, used when reclassification occurs (default 5 degrees)-->
        <arg name="min_height_threshold" default="0.5" />  <!-- Minimum height threshold between points (default 0.05 meters)-->
        <arg name="reclass_distance_threshold" default="0.2" />  <!-- Distance between points at which re classification will occur (default 0.2 meters)-->
        <arg name="no_ground_point_topic" default="/points_no_ground" />
        <arg name="ground_point_topic" default="/points_ground" />
    </include>


    <group if="$(arg acc)">
    <!-- <group if="true"> -->
        <include file="$(find aichallenge_bringup)/launch/acc.launch"/>

    </group>



    <group if="$(arg avoid)">
    <!-- <group if="true"> -->
        <!-- ToDo : modify launch files and add ROS nodes developed by you -->
        <include file="$(find aichallenge_bringup)/launch/avoid.launch"/>

    </group>



    <group if="$(arg traffic_light)">
    <!-- <group if="true"> -->
        <!-- ToDo : add ROS nodes developed by you -->
        <include file="$(find aichallenge_bringup)/launch/traffic_light.launch"/>

    </group>
</launch>
